{"version":3,"sources":["js/app.js","js/controllers/auth.js","models/event.js","models/friend.js","js/controllers/friend.js","models/location.js","js/controllers/main.js","models/user.js","js/controllers/user.js"],"names":["Router","$stateProvider","$urlRouterProvider","state","url","templateUrl","controller","otherwise","Auth","$authProvider","loginUrl","signupUrl","tokenPrefix","RegisterController","$auth","$state","$window","submit","signup","register","user","then","res","localStorage","setItem","data","token","go","this","LoginController","User","login","credentials","authenticate","provider","console","log","Event","$resource","id","update","method","Friend","FriendIndexController","friendIndex","all","query","FriendShowController","friendShow","friend","get","params","NewFriendFormController","createNewFriend","save","newFriendForm","newFriend","getPayload","_id","Location","MainController","$rootScope","logout","secureState","e","toState","main","menuVisible","message","isAuthenticated","protectedStates","includes","name","preventDefault","toggleMenu","isLoggedIn","$on","UserFormController","userForm","hobbies","push","interests","sign","$update","undefined","type","asc","sun","moon","mercury","venus","UserShowController","userShow","angular","module","config","$inject","factory"],"mappings":"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","file":"app.js","sourcesContent":["angular\n  .module('FriendManagerApp', ['ngAnimate', 'ngResource', 'ui.router', 'satellizer', 'angular-carousel', 'chart.js'])\n  .config(Router)\n  .config(Auth);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider) {\n  $stateProvider\n    .state('test', {\n      url: '/test',\n      templateUrl: '/templates/test.html'\n    })\n    .state('login', {\n      url: '/',\n      templateUrl: '/templates/login.html',\n      controller: 'LoginController as login'\n    })\n    .state('register', {\n      url: '/register',\n      templateUrl: '/templates/register.html',\n      controller: 'RegisterController as register'\n    })\n    .state('userForm', {\n      url: '/userForm',\n      templateUrl: '/templates/userForm.html',\n      controller: 'UserFormController as userForm'\n    })\n    .state('userShow', {\n      url: '/userShow',\n      templateUrl: '/templates/userShow.html',\n      controller: 'UserShowController as userShow'\n    })\n    .state('newFriendForm', {\n      url: '/newFriendForm',\n      templateUrl: '/templates/newFriendForm.html',\n      controller: 'NewFriendFormController as newFriendForm'\n    })\n    .state('friendIndex', {\n      url: '/friendIndex',\n      templateUrl: '/templates/friendIndex.html',\n      controller: 'FriendIndexController as friendIndex'\n    })\n    .state('friendShow', {\n      url: '/friend/:id',\n      templateUrl: '/templates/friendShow.html',\n      controller: 'FriendShowController as friendShow'\n    });\n  $urlRouterProvider.otherwise('/');\n}\nAuth.$inject = ['$authProvider'];\nfunction Auth($authProvider) {\n  $authProvider.loginUrl = '/login';\n  $authProvider.signupUrl = '/register';\n  $authProvider.tokenPrefix = '';\n}\n","angular.module('FriendManagerApp')\n  .controller('RegisterController', RegisterController)\n  .controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state', '$window'];\nfunction RegisterController($auth, $state, $window) {\n  const register = this;\n\n  function submit() {\n    $auth.signup(register.user)\n      .then((res) => {\n        $window.localStorage.setItem('token', res.data.token);\n        $state.go('userForm');\n      });\n  }\n  register.submit = submit;\n}\n\n\nLoginController.$inject = ['$auth', '$state', 'User'];\nfunction LoginController($auth, $state, User) {\n  const login = this;\n  login.credentials = {};\n  function submit() {\n    $auth.login(login.credentials)\n    .then(() => {\n      $state.go('test');\n    });\n  }\n\n  function authenticate(provider) {\n    $auth.authenticate(provider)\n    .then((res) => {\n      console.log(res);\n      $state.go('test');\n    });\n  }\n  login.submit = submit;\n  login.authenticate = authenticate;\n}\n","angular.module('FriendManagerApp')\n  .factory('Event', Event);\n\nEvent.$inject = ['$resource'];\nfunction Event($resource) {\n  return new $resource('/events/:id', { id: '@_id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('FriendManagerApp')\n  .factory('Friend', Friend);\n\nFriend.$inject = ['$resource'];\nfunction Friend($resource) {\n  return new $resource('/friends/:id', { id: '@_id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('FriendManagerApp')\n  .controller('FriendIndexController', FriendIndexController)\n  .controller('FriendShowController', FriendShowController)\n  .controller('NewFriendFormController', NewFriendFormController);\n\n\nFriendIndexController.$inject = ['$auth', 'User', '$state', 'Friend'];\nfunction FriendIndexController($auth, User, $state, Friend) {\n  const friendIndex = this;\n\n  friendIndex.all = Friend.query();\n  console.log('all friends', friendIndex.all);\n}\n\nFriendShowController.$inject = ['$auth', 'User', '$state', 'Friend'];\nfunction FriendShowController($auth, User, $state, Friend) {\n  const friendShow = this;\n\n  friendShow.friend = Friend.get($state.params);\n  console.log('this friend', friendShow.friend);\n\n}\n\n\nNewFriendFormController.$inject = ['$auth', '$state', 'Friend'];\nfunction NewFriendFormController($auth, $state, Friend) {\n  const newFriendForm = this;\n\n  newFriendForm.newFriend = {};\n  // if (!newFriendForm.newFriend.user) {\n  newFriendForm.newFriend.user = $auth.getPayload()._id;\n  // }\n\n  function createNewFriend () {\n    Friend.save(newFriendForm.newFriend, () => {\n      $state.go('friendIndex');\n    });\n  }\n\n\n  newFriendForm.submit = createNewFriend;\n\n}\n","angular.module('FriendManagerApp')\n  .factory('Location', Location);\n\nLocation.$inject = ['$resource'];\nfunction Location($resource) {\n  return new $resource('/locations/:id', { id: '@_id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('FriendManagerApp')\n  .controller('MainController', MainController);\n\n\nMainController.$inject = ['$auth', '$state', '$rootScope', 'User'];\nfunction MainController($auth, $state, $rootScope, User) {\n  const main = this;\n  main.isLoggedIn = $auth.isAuthenticated;\n  main.message = null;\n  main.menuVisible = false;\n  function logout() {\n    $auth.logout()\n    .then(() => {\n      $state.go('friendIndex');\n    });\n  }\n\n\n  User.get({ id: $auth.getPayload()._id }, (user) => {\n    main.user = user;\n    console.log('current user', main.user);\n  });\n\n  const protectedStates = [];\n  function secureState(e, toState) {\n    main.menuVisible = false;\n    main.message = null;\n    console.log(toState, e);\n    if(!$auth.isAuthenticated() && protectedStates.includes(toState.name)) {\n      e.preventDefault();\n      main.message = 'You must be logged in to go there!';\n      $state.go('login');\n    }\n  }\n\n  $rootScope.$on('$stateChangeStart', secureState);\n  main.logout = logout;\n\n  function toggleMenu() {\n    main.menuVisible = main.menuVisible ? false : true;\n  }\n  \n  main.toggleMenu = toggleMenu;\n}\n","angular.module('FriendManagerApp')\n  .factory('User', User);\n\nUser.$inject = ['$resource'];\nfunction User($resource) {\n  return new $resource('/users/:id', { id: '@_id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('FriendManagerApp')\n  .controller('UserFormController', UserFormController)\n  .controller('UserShowController', UserShowController);\n  // .controller('UserDataController', UserDataController);\n\n\n\nUserFormController.$inject = ['$auth', 'User', '$state'];\nfunction UserFormController($auth, User, $state) {\n  const userForm = this;\n\n  //make objects\n  userForm.hobbies = {\n    name: undefined,\n    type: undefined\n  };\n  userForm.interests = {\n    name: undefined,\n    type: undefined\n  };\n  userForm.sign = {\n    asc: undefined,\n    sun: undefined,\n    moon: undefined,\n    mercury: undefined,\n    venus: undefined\n  };\n\n  userForm.user = User.get({ id: $auth.getPayload()._id });\n\n  function submit() {\n     // console.log('pre update', userForm.user);\n\n    //push objects to array\n    userForm.user.hobbies.push(userForm.hobbies);\n    userForm.user.interests.push(userForm.interests);\n    userForm.user.sign.push(userForm.sign);\n    console.log('data to be saved', userForm.user, 'user object hobbies', userForm.user.hobbies, 'user object interests', userForm.user.interests, 'user object sign', userForm.user.sign);\n\n    userForm.user.$update(() => {\n      console.log('post update your data', userForm.user);\n      $state.go('userShow');\n    });\n  }\n\n  userForm.submit = submit;\n\n}\n\n\nUserShowController.$inject = ['$auth', '$state', '$rootScope', 'User'];\nfunction UserShowController($auth, $state, $rootScope, User) {\n  const userShow = this;\n\n  User.get({ id: $auth.getPayload()._id }, (user) => {\n    userShow.user = user;\n    console.log('showing user', userShow.user);\n  });\n\n}\n"]}